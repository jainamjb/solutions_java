package pkg;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.awt.event.ActionEvent;

public class UI extends Download {
	 private Download selectedDownload;
	//private ArrayList<Download> downloadList = new ArrayList<Download>();	
	 AbstractTableModel tableModel;
	JFrame frame = new JFrame("Internet Download Manager.");
	JTextField link = new JTextField(50);
	JPanel jap = new JPanel() ;
	JButton go = new JButton("GO!");
	JButton Download= new JButton("DOWNLOAD!");
	JButton Pause= new JButton("PAUSE!");	
	JButton Resume= new JButton("RESUME!");
	JButton Delete= new JButton("Delete!");
	JTable table;
	//Object[][] rows;
	String rows[][] =
		{
			{ "FileName", "null", "null","null" },
			{ "FileName", "null", "null" ,"null"},
			{ "FileName", "null", "null","null" },
			{ "FileName", "null", "null","null" }
		};
	
	final String[] columnNames = {"FileName", "Size",
			"Progress", "Status"};
	JScrollPane Scroll_Table;
	
	JLabel link_text = new JLabel("Enter the link of File to Download...");	
	public  UI(){
															//Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	    													//frame.setBounds(0,0,screenSize.width, screenSize.height);
	frame.setExtendedState(JFrame.MAXIMIZED_BOTH);			//frame.pack();
	frame.setLayout(null);												//frame.setSize();
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	//jap.setLocation(150, 200);
	//jap.setSize(200, 20);
	link_text.setBounds(273,93,300,10);
	
	
	jap.add(link_text);
	jap.add(link);
	jap.setBounds(200, 120, 700, 30); 

	/*JPanel downloadsPanel = new JPanel();
    downloadsPanel.setBorder(BorderFactory.createTitledBorder("Downloads"));
    downloadsPanel.setLayout(new BorderLayout());
    downloadsPanel.add(new JScrollPane(table), BorderLayout.CENTER);*/
	
	table = new JTable(tableModel);
	table.setBounds(270, 220, 900, 170);
	table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	      public void valueChanged(ListSelectionEvent e) {
	        //tableSelectionChanged();
	      }
	    });
	    
	
	Scroll_Table = new JScrollPane(table);
	Scroll_Table.setBounds(270, 230, 900, 170);
	
	Download.setBounds(50, 150, 120, 30);
	Download.setBackground(Color.green);
	Download.setEnabled(false);
	
	Pause.setBounds(50, 200, 120, 30);
	Pause.setBackground(Color.BLACK);
	Pause.setForeground(Color.WHITE);
	Pause.setEnabled(false);
	Pause.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent eve){
		//pause();
			//	Pause.setBackground(Color.cyan);
		}
	});
	
	Resume.setBounds(50, 250, 120, 30);
	Resume.setBackground(Color.GRAY);
	Resume.setForeground(Color.WHITE);
	Resume.setEnabled(false);
	Resume.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent eve){
		//resume();
			//	Pause.setBackground(Color.cyan);
		}
	});
	
	Delete.setBounds(50, 300, 120, 30);
	Delete.setBackground(Color.red);
	Delete.setEnabled(false);
	Delete.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent eve){
		//delete();
			//	Pause.setBackground(Color.cyan);
		}
	});
	
	go.setBounds(925, 120, 75, 30); 
	go.setBackground(Color.cyan);
	go.setEnabled(true);
	go.addActionListener(new ActionListener(){
		public void actionPerformed(ActionEvent eve){
		Add();
			//	Pause.setBackground(Color.cyan);
		}
	});
	
	frame.getContentPane().add(jap);
	frame.add(go);
	frame.add(Download);
	frame.add(Resume);
	frame.add(Pause);
	frame.add(Delete);
	frame.add(jap);
	frame.add(link_text);
	frame.add(Scroll_Table);
	frame.setVisible(true);
	//frame.add(downloadsPanel);
	
}
	private void Add() {
		URL verifiedUrl = verifyUrl(link.getText());
		if (verifiedUrl != null) {
			addDownload(new Download());
			link.setText("");// reset add text field
		} else {
		link.setText("");// reset add text field
		JOptionPane.showMessageDialog(frame,
		"Invalid Download URL", "Error",
		JOptionPane.ERROR_MESSAGE);
		if (status== COMPLETE){
			JOptionPane.showMessageDialog(frame,
					"Download Complete!", "Error",
					JOptionPane.ERROR_MESSAGE);
			go.setEnabled(true);
		}
		}
		}
	
	public void addDownload ( Download download) {
		go.setEnabled(false);
		start(verifyUrl(link.getText()));
		//download.addObserver(this);
		//go.setEnabled(true);
		downloadList.add(download);
		//tableModel.fireTableRowsInserted(table.getRowCount() - 1, table.getRowCount() - 1);
		}
	
	
	 URL verifyUrl(String url) {  

		 if (!url.toLowerCase().startsWith("http://"))
			 return null;
			 // Verify format of URL.
			 URL verifiedUrl = null;
			 try {
			 verifiedUrl = new URL(url);
			 } catch (Exception e) {
			 return null;
			 }
			 // Make sure URL specifies a file.
			 if (verifiedUrl.getFile().length() < 2)
			 return null;
			 return verifiedUrl;
		}
	 
	 public Download getDownload(int row) {
		    return (Download) downloadList.get(row);
		  }

	 /*
	  private void tableSelectionChanged() {
	    if (selectedDownload != null)
	      selectedDownload.deleteObserver(UI.this);

	    if ( table.getSelectedRow() > -1) {
	      selectedDownload = getDownload(table.getSelectedRow());
	      selectedDownload.addObserver(UI.this);
	      updateButtons();
	    }
	  }
	 
	  private void updateButtons() {
		    if (selectedDownload != null) {
		      int status = selectedDownload.getStatus();
		      switch (status) {
		      case DOWNLOADING:
		    	  Pause.setEnabled(true);
			        Resume.setEnabled(false);
			        Delete.setEnabled(true);
			        //clearButton.setEnabled(true);
		        break;
		      case PAUSED:
		    	  Pause.setEnabled(false);
			        Resume.setEnabled(true);
			        Delete.setEnabled(true);
			        //clearButton.setEnabled(true);
		        break;
		      case ERROR:
		    	  Pause.setEnabled(false);
			        Resume.setEnabled(true);
			        Delete.setEnabled(false);
			        //clearButton.setEnabled(true);
		        break;
		      default: // COMPLETE or CANCELLED
		        Pause.setEnabled(false);
		        Resume.setEnabled(false);
		        Delete.setEnabled(false);
		        //clearButton.setEnabled(true);
		      }
		    } else {
		      Pause.setEnabled(false);
		      Resume.setEnabled(false);
		      Delete.setEnabled(false);
		      //clearButton.setEnabled(false);
		    }
		  }
*/
		 
	  
public static void main(String[] args){
	UI u = new UI();
}

}
